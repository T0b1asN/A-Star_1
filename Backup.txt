	int currGCost = currPos.GCost;
	closedList.push_back(currPos);

	for (int x = currPos.pos.x - 1; x <= currPos.pos.x + 1; x++)
	{
		for (int y = currPos.pos.y - 1; y <= currPos.pos.y + 1; y++)
		{
			if (x > 0 && y > 0 && x < map.getSize().x && y < map.getSize().y)
			{
				if ((sf::Vector2i(x, y) != currPos.pos)) // Ecken?? kostet mehr??
				{
					std::cout << currPos.pos.x << "|" << currPos.pos.y << std::endl;
					if (map.map.at(x).at(y) != 1)
					{
						bool isFree = true;
						for (const Tile t : closedList)
						{
							if (t.pos == sf::Vector2i(x, y))
								isFree = false;
						}
						if (isFree)
						{
							Tile t = Tile(sf::Vector2i(x, y), currGCost + 1, currGCost + 1 + GetHCost(Tile(sf::Vector2i(x, y))));
							bool inOpen = false;
							for (const Tile p : openList)
							{
								if (p.pos == t.pos)
									inOpen = true;
							}
							if (!inOpen)
							{
								openList.push_back(t);
							}
						}
					}
				}
			}
		}
	}

	Tile record(sf::Vector2i(0, 0), 10000, 10000.0f);

	for (const Tile t : openList)
	{
		if (t.cost < record.cost)
		{
			DeleteTileFromVector(openList, t);
			record = t;
			closedList.push_back(t);
		}
	}

	//DeleteTileFromVector(closedList, currPos);
	currPos = record;

	map.SetTile(currPos.pos, 4);